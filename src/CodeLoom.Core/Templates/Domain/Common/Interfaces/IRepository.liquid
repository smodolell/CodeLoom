FileName:IRepository.cs
Paths:{{ context.NameSpaceBase }}.{{ context.ApplicationName }}.Domain|Common|Interfaces

using System.Linq.Expressions;

namespace {{ context.NameSpaceBase }}.{{ context.ApplicationName }}.Domain.Common.Interfaces;

public interface IRepository<T> where T : class
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    Task<IEnumerable<T>> FindAsync(Expression<Func<T, bool>> predicate);
    Task<T> FirstOrDefaultAsync(Expression<Func<T, bool>> predicate);
    Task AddAsync(T entity);
    Task AddRangeAsync(IEnumerable<T> entities);
    void Update(T entity);
    void Remove(T entity);
    void RemoveRange(IEnumerable<T> entities);
    Task<int> CountAsync();
    Task<bool> AnyAsync(Expression<Func<T, bool>> predicate);
}